<template>
  <view class="container">
    <view class="user-info">
      <!-- 用户头像 -->
      <image class="avatar" :src="userInfo.profilePicture || defaultAvatar" alt="头像" @click="uploadAvatar" />
      
      <!-- 用户名和身份 -->
      <view class="user-details">
        <view class="username">
          <text v-if="!isEditingUsername" @click="editUsername">{{ userInfo.username }}</text>
          <input
            v-if="isEditingUsername"
            v-model="newUsername"
            class="edit-input"
            type="text"
            @blur="saveUsername"
            @keyup.enter="saveUsername"
            placeholder="请输入新用户名"
          />
        </view>
        <view class="role">{{ displayRole }}</view>
      </view>
      
      <!-- 用户简介 -->
      <view class="bio-container">
        <view class="white-box" @click="enterEditBio">
          <text class="bio" v-if="!isEditingBio">{{ userInfo.bio || '没有个人简介' }}</text>
          <textarea
            v-if="isEditingBio"
            v-model="newBio"
            class="bio-input"
            @blur="saveBio"
            @keyup.enter="saveBio"
            placeholder="请输入个人简介"
          />
        </view>
      </view>
    </view>

    <view class="button-container">
      <button class="action-button" v-for="(button, index) in buttons" :key="index" @click="goToPage(button)">
        <text>{{ button.name }}</text>
        <image src="/static/images/详情.png" alt="详情图标" class="button-icon" />
      </button>
	  
	    <button class="action-button" @click="logout">
	      <text>退出登录</text>
		  <image src="/static/images/详情.png" alt="详情图标" class="button-icon" />
	    </button>
    </view>

  </view>
</template>

<script>
export default {
  data() {
    return {
      defaultAvatar: '/static/images/默认.png', // 默认头像 URL
      userInfo: {
		userid:0,
        username: '',
        bio: '',
        profilePicture: null,
        role: '',
      },
      isEditingUsername: false,
      isEditingBio: false,
      newUsername: '',
      newBio: '',
      allButtons: [
              { name: '我点赞的帖子', page: '/pages/user/likePost/likePost' },
              { name: '我收藏的帖子', page: '/pages/user/favouritePost/favouritePost' },
              { name: '我发布的帖子', page: '/pages/user/publishPost/publishPost' },
              { name: '发布商品', page: '/pages/user/publishProduct/publishProduct' },
			  { name: '我的橱窗', page: '/pages/user/myShop/myShop' },
              { name: '发布活动', page: '/pages/user/publishEvent/publishEvent' },
              { name: '修改活动', page: '/pages/user/changeEvent/changeEvent' },
            ],
      buttons: [], // 当前显示的按钮
    };
  },
  computed: {
    // 根据 role 显示不同的按钮数量
    displayRole() {
      if (this.userInfo.role === 'ADMIN') {
        this.buttons = this.allButtons;
        return '管理员';
      } else if (this.userInfo.role === 'APPRAISER') {
        this.buttons = this.allButtons;
        return '非遗传承人';
      } else {
        this.buttons = this.allButtons.slice(0, 3); // 只显示前3个按钮
        return '非遗品鉴官';
      }
    }
  },
  methods: {
	//退出登录
	logout() {
		uni.removeStorageSync('token');
	    uni.navigateTo({
			url: '/pages/login/login',
	    });
	},
	
    // 获取用户信息
    getUserInfo() {
      const token = uni.getStorageSync('token');
      uni.request({
        url: 'http://localhost:8080/api/user/getInfo',
        method: 'GET',
        header: {
          'Content-Type': 'application/json',
          'Authorization': `${token}`,
        },
        success: (res) => {
          if (res.statusCode === 200) {
            this.userInfo = res.data.data;
          } else {
            console.error('请求失败，状态码:', res.statusCode);
          }
        },
        fail: (err) => {
          console.error('请求失败:', err);
        },
      });
    },
  
    // 上传头像
    uploadAvatar() {
      uni.chooseImage({
        count: 1,
        success: (res) => {
          const tempFilePath = res.tempFilePaths[0];
          this.uploadFileToServer(tempFilePath);
        },
        fail: (err) => {
          console.error('选择图片失败:', err);
        }
      });
    },
    
    // 上传文件到服务器
    uploadFileToServer(filePath) {
      const token = uni.getStorageSync('token');
      uni.uploadFile({
        url: 'http://localhost:8080/api/user/uploadPicture',
        filePath: filePath,
        name: 'image',
        header: {
          'Authorization': `${token}`,
        },
        success: (res) => {
          if (res.statusCode === 200) {
            let response;
            try {
              response = JSON.parse(res.data);
              uni.showToast({
                title: '头像上传成功',
                icon: 'success',
              });
              this.userInfo.profilePicture = response.data.profilePicture;
            } catch (e) {
              console.error('解析响应失败:', e);
              uni.showToast({
                title: '解析响应失败',
                icon: 'none',
              });
            }
          } else {
            console.error('上传头像失败:', res.statusCode);
            uni.showToast({
              title: '上传失败，请重试',
              icon: 'none',
            });
          }
        },
        fail: (err) => {
			console.error('请求失败:', err);
			uni.showToast({
				title: '请求失败，请重试',
				icon: 'none',
			});
        }
      });
    },
  
    // 编辑用户名
    editUsername() {
		this.isEditingUsername = true;
		this.newUsername = this.userInfo.username;
    },
  
    // 保存修改后的用户名
    saveUsername() {
		const token = uni.getStorageSync('token');
		if (this.newUsername === this.userInfo.username) {
			this.isEditingUsername = false;
			return;
		}
  
		// 请求更新用户名
		uni.request({
			url: 'http://localhost:8080/api/user/updateInfo',
			method: 'PUT',
			header: {
				'Content-Type': 'application/json',
				'Authorization': `${token}`,
			},
			data: {
				username: this.newUsername,
			},
			success: (res) => {
				if (res.statusCode === 200) {
					// 如果更新成功，更新本地用户名并退出编辑状态
					this.userInfo.username = this.newUsername;
					this.isEditingUsername = false;
				} else {
					console.error('更新用户名失败:', res.statusCode);
					uni.showToast({
						title: '更新失败，请重试',
						icon: 'none',
					});
				}
			},
			fail: (err) => {
				console.error('请求失败:', err);
				uni.showToast({
					title: '请求失败，请重试',
					icon: 'none',
				});
			},
		});
    },
  
    // 进入编辑简介模式
    enterEditBio() {
		this.isEditingBio = true;
		this.newBio = this.userInfo.bio || '';
    },
  
    // 保存修改后的简介
    saveBio() {
		const token = uni.getStorageSync('token');
		if (this.newBio === this.userInfo.bio) {
			this.isEditingBio = false;
			return;
		}
  
		// 请求更新简介
		uni.request({
			url: 'http://localhost:8080/api/user/updateInfo',
			method: 'PUT',
			header: {
				'Content-Type': 'application/json',
				'Authorization': `${token}`,
			},
			data: {
				bio: this.newBio,
			},
        success: (res) => {
			if (res.statusCode === 200) {
				this.userInfo.bio = this.newBio;
				this.isEditingBio = false;
			} else {
				console.error('更新简介失败:', res.statusCode);
				uni.showToast({
					title: '更新失败，请重试',
					icon: 'none',
				});
			}
        },
        fail: (err) => {
			console.error('请求失败:', err);
			uni.showToast({
				title: '请求失败，请重试',
				icon: 'none',
			});
			},
		});
    },
  
    // 跳转到指定页面
    goToPage(button) {
      const userId = this.userInfo.userid;
      uni.navigateTo({
        url: `${button.page}?userId=${userId}`,
      });
    },
  },

  mounted() {
    this.getUserInfo(); // 组件加载时获取用户信息
  },
  
  onShow() {
      this.getUserInfo(); // 每次页面重新显示时重新获取用户信息
    }
};
</script>


<style>
.container {
  display: flex;
  flex-direction: column;
  height: 100vh;
  background: rgb(238, 225, 215);
  padding-top: 20px;
  width: 100%;
}

.user-info {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  padding: 20px;
  background: rgb(255, 248, 244);
  border-radius: 10px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  width: 80%;
  position: relative;
  margin-left: 10%;
  margin-top: 0px;
}

.avatar {
  width: 60px;
  height: 60px;
  border-radius: 50%;
  object-fit: cover;
  position: absolute;
  top: 15px;
  left: 15px;
}

.user-details {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  margin-left: 70px;
  text-align: left;
}

.username {
  font-size: 13px;
  color: #333;
  font-weight: bold;
  display: flex;
  align-items: center;
  justify-content: flex-start;
  width: 100%;
  margin-bottom: 5px;
}

.edit-input {
  font-size: 14px;
  padding: 5px;
  width: 120px;
  border-radius: 5px;
  border: 1px solid #ccc;
  margin-left: 0px;
}

.role {
  font-size: 10px;
  color: #333;
  padding: 3px 30px;
  border: 2px solid rgb(207, 150, 144);
  border-radius: 5px;
  margin-top: 5px;
  background: rgb(255, 207, 202);
  box-sizing: border-box;
  text-align: center;
}

.bio-container {
  margin-top: 10px;
  width: 100%;
}

.bio {
  font-size: 10px;
  color: #666;
  text-align: left;
  padding: 0px;
  line-height: 1;
}

.white-box {
  background-color: #fff;
  width: 100%;
  height: 60px;
  border-radius: 5px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  margin-top: 5px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.bio-input {
  width: 100%;
  height: 70px;
  border: none;
  border-radius: 5px;
  padding: 10px;
  font-size: 14px;
  background-color: rgb(245, 245, 245);
  resize: none;
  box-sizing: border-box;
  outline: none;
}

.button-container {
  display: flex;
  flex-direction: column;
  width: 80%;
  margin-top: 10px;
  margin-left: 10%;
  padding-bottom: 15px;
}

.action-button {
  background: rgb(255, 250, 242);
  border: none;
  height: 35px;
  padding: 5px 20px;
  border-radius: 15px;
  color: #333;
  font-size: 14px;
  cursor: pointer;
  margin-bottom: 5px;
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: space-between;
  align-items: center;
  transition: background 0.1s ease;
}

.action-button:active {
  background: rgb(210, 190, 180);
}

.action-button:not(:active) {
  transition: background 0.1s ease;
}

.action-button text {
  margin-left: 30px;
  margin-right: 10px;
  text-align: center;
}

.button-icon {
  width: 20px;
  height: 20px;
  margin-left: 5px;
}
</style>
