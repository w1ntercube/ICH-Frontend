<template>
  <view class="publish-container">
    <form @submit.prevent="submitForm">
      <!-- 商品图片上传 -->
      <view class="upload-section">
        <view class="upload-box" @click="chooseImage" v-if="!tempFilePath">
          <image src="/static/images/edit.png" mode="aspectFit" class="upload-icon"/>
          <text>点击上传商品图片</text>
        </view>
        <view class="image-preview" v-else>
          <image :src="tempFilePath" mode="aspectFit" class="preview-image"/>
          <view class="delete-btn" @click="deleteImage">×</view>
        </view>
      </view>

      <!-- 商品信息表单 -->
      <view class="form-section">
        <view class="form-item">
          <text class="label">商品名称</text>
          <input 
            type="text" 
            v-model="formData.title" 
            placeholder="请输入商品名称"
            class="input"
          />
        </view>

        <view class="form-item">
          <text class="label">商品类型</text>
          <picker 
            @change="typeChange" 
            :value="typeIndex" 
            :range="types" 
            range-key="typeName"
          >
            <view class="picker">
              {{ types[typeIndex]?.typeName || '家装家具' }}
            </view>
          </picker>
        </view>

        <view class="form-item">
          <text class="label">商品价格</text>
          <input 
            type="digit" 
            v-model="formData.price" 
            placeholder="请输入商品价格"
            class="input"
          />
        </view>

        <view class="form-item">
          <text class="label">商品描述</text>
          <textarea 
            v-model="formData.description" 
            placeholder="请输入商品描述"
            class="textarea"
          />
        </view>

        <view class="form-item">
          <text class="label">销售链接</text>
          <input 
            type="text" 
            v-model="formData.salesUrl" 
            placeholder="请输入商品销售链接"
            class="input"
          />
        </view>
      </view>

      <!-- 提交按钮 -->
      <button 
        class="submit-btn" 
        @click="submitForm"
        :disabled="isSubmitting"
      >
        {{ isSubmitting ? '发布中...' : '发布商品' }}
      </button>
    </form>
  </view>
</template>

<script>
export default {
  data() {
    return {
      formData: {
        title: '',
        typeName: '',
        description: '',
        price: '',
        salesUrl: ''
      },
      tempFilePath: '', // 临时图片路径
      types: [], // 商品类型列表
      typeIndex: 0, // 选中的类型索引
      isSubmitting: false // 是否正在提交
    }
  },

  onLoad() {
    this.getTypes()
  },

  methods: {
    // 获取商品分类
    async getTypes() {
      try {
        const response = await fetch("http://localhost:8080/api/products/types")
        const result = await response.json()
        this.types = result.data
      } catch (error) {
        console.error("获取分类失败:", error)
        uni.showToast({
          title: '获取分类失败',
          icon: 'none'
        })
      }
    },

	chooseImage() {
      uni.chooseImage({
        count: 1,
        sizeType: ['original', 'compressed'],
        sourceType: ['album', 'camera'],
        success: (res) => {
          uni.getImageInfo({
            src: res.tempFilePaths[0],
            success: (imageInfo) => {
              // 检查图片大小
              if (imageInfo.size > 5 * 1024 * 1024) {
                uni.showToast({
                  title: '图片大小不能超过5MB',
                  icon: 'none'
                })
				(console.log("检查图片大小通过:",imageInfo.size))
                return
              }
              this.tempFilePath = res.tempFilePaths[0]
            },
            fail: () => {
              uni.showToast({
                title: '图片信息获取失败',
                icon: 'none'
              })
            }
          })
        }
      })
    },


    // 删除已选图片
    deleteImage() {
      this.tempFilePath = ''
    },

    // 类型选择改变
    typeChange(e) {
      this.typeIndex = e.detail.value
      this.formData.typeName = this.types[this.typeIndex].typeName
    },

 // 提交表单
	async submitForm() {
	  if (!this.validateForm()) return
	  this.isSubmitting = true

	  try {
		const token = uni.getStorageSync('token')
		console.log("获取的token",token)
		const uploadResult = await new Promise((resolve, reject) => {
		  uni.uploadFile({
			url: 'http://localhost:8080/api/products/post',
			filePath: this.tempFilePath,
			name: 'file',
			header: {
			  'Authorization': `Bearer ${token}`
			},
			formData: {
			  title: this.formData.title,
			  typeName: this.formData.typeName,
			  description: this.formData.description,
			  price: this.formData.price,
			  salesUrl: this.formData.salesUrl
			},
			success: (uploadRes) => {
			  //const result = JSON.parse(uploadRes.data)
			  console.log("upLoad输出",uploadRes)
			  if (uploadRes.statusCode==200) {
				uni.showToast({
				  title: '发布成功',
				  icon: 'success'
				})
				
				setTimeout(() => {
				  uni.navigateBack({
					delta: 1,
					success: () => {
					  // 通知商品列表页刷新，使用后端返回的完整商品信息
					  uni.$emit('productPublished', result.data)
					}
				  })
				}, 1500)
				resolve(result)
			  } else {
				reject(new Error(result.message))
			  }
			},
			fail: reject
		  })
		})

	  } catch (error) {
		uni.showToast({
		  title: '发布失败',
		  icon: 'none'
		})
	  } finally {
		this.isSubmitting = false
	  }
	},   

    // 表单验证
    validateForm() {
      if (!this.tempFilePath) {
        uni.showToast({
          title: '请上传商品图片',
          icon: 'none'
        })
        return false
      }

      if (!this.formData.title.trim()) {
        uni.showToast({
          title: '请输入商品名称',
          icon: 'none'
        })
        return false
      }

      if (!this.formData.typeName) {
        uni.showToast({
          title: '请选择商品类型',
          icon: 'none'
        })
        return false
      }

      if (!this.formData.price || isNaN(this.formData.price)) {
        uni.showToast({
          title: '请输入有效的价格',
          icon: 'none'
        })
        return false
      }

      return true
    }
  }
}
</script>

<style>
.publish-container {
  padding: 30rpx;
  background-color: #fffaf2;
  min-height: 100vh;
}

.upload-section {
  background-color: #fff;
  padding: 30rpx;
  border-radius: 12rpx;
  margin-bottom: 30rpx;
}

.upload-box {
  height: 300rpx;
  border: 2rpx dashed #ddd;
  border-radius: 8rpx;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  color:#a4a4a4;
}
.upload-icon {
  width: 80rpx;
  height: 80rpx;
  margin-bottom: 20rpx;
}

.image-preview {
  position: relative;
  width: 100%;
  height: 300rpx;
}

.preview-image {
  width: 100%;
  height: 100%;
  border-radius: 8rpx;
}

.delete-btn {
  position: absolute;
  top: 0rpx;
  right: 0rpx;
  width: 40rpx;
  height: 40rpx;
  background-color: rgba(0, 0, 0, 0.5);
  color: #fff;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.form-section {
  background-color: #fff;
  padding: 30rpx;
  border-radius: 12rpx;
}

.form-item {
  margin-bottom: 30rpx;
}

.label {
  display: block;
  margin-bottom: 10rpx;
  color: #333;
  font-size: 28rpx;
}

.input {
  width: 100%;
  height: 80rpx;
  border: 1rpx solid #eee;
  border-radius: 8rpx;
  padding: 0 20rpx;
  font-size: 25rpx;
}

.textarea {
  width: 100%;
  height: 200rpx;
  border: 1rpx solid #eee;
  border-radius: 8rpx;
  padding: 20rpx;
  font-size: 25rpx;
}

.picker {
  width: 100%;
  height: 80rpx;
  border: 1rpx solid #eee;
  border-radius: 8rpx;
  padding: 0 20rpx;
  font-size: 25rpx;
  line-height: 80rpx;
}

.submit-btn {
  margin-top: 50rpx;
  width: 100%;
  height: 90rpx;
  line-height: 90rpx;
  background-color: #ff8f73;
  color: #fff;
  font-size: 32rpx;
  border-radius: 25rpx;
}

.submit-btn[disabled] {
  background-color: #ccc;
}
</style>