<template>
  <view class="container">
    <!-- 页面标题 -->
    <view class="section-header">
      <text class="title-text">创建新活动</text>
      <view class="divider"></view>
    </view>

    <!-- 创建活动表单 -->
    <scroll-view class="form-container" scroll-y>
      <!-- 活动标题 -->
      <view class="input-group">
        <text class="label">标题</text>
        <input v-model="title" placeholder="请输入活动标题" />
      </view>

      <!-- 活动描述 -->
      <view class="input-group">
        <text class="label">描述</text>
        <textarea
          v-model="description"
          placeholder="请输入活动描述"
          class="description-textarea">
        </textarea>
      </view>

      <!-- 开始日期 -->
      <view class="input-group">
        <text class="label">开始日期</text>
        <picker mode="date" v-model="startDate" @change="onStartDateChange">
          <view class="picker">{{ startDate || '请选择日期' }}</view>
        </picker>
      </view>

      <!-- 开始时间 -->
      <view class="input-group">
        <text class="label">开始时间</text>
        <picker mode="time" v-model="startTime" @change="onStartTimeChange">
          <view class="picker">{{ startTime || '请选择时间' }}</view>
        </picker>
      </view>

      <!-- 结束日期 -->
      <view class="input-group">
        <text class="label">结束日期</text>
        <picker mode="date" v-model="endDate" @change="onEndDateChange">
          <view class="picker">{{ endDate || '请选择日期' }}</view>
        </picker>
      </view>

      <!-- 结束时间 -->
      <view class="input-group">
        <text class="label">结束时间</text>
        <picker mode="time" v-model="endTime" @change="onEndTimeChange">
          <view class="picker">{{ endTime || '请选择时间' }}</view>
        </picker>
      </view>

      <!-- 活动状态 -->
      <view class="input-group">
        <text class="label">状态</text>
        <picker :range="statusOptions" v-model="statusIndex" @change="updateStatus">
          <view class="picker">{{ statusOptions[statusIndex] || '请选择状态' }}</view>
        </picker>
      </view>

      <!-- 活动地点 -->
      <view class="input-group">
        <text class="label">地点</text>
        <input v-model="location" placeholder="请输入活动地点" />
      </view>

      <view class="input-group">
        <text class="label">省</text>
        <input v-model="province" placeholder="请输入省份" />
      </view>

      <view class="input-group">
        <text class="label">市</text>
        <input v-model="city" placeholder="请输入城市" />
      </view>

      <view class="input-group">
        <text class="label">区</text>
        <input v-model="district" placeholder="请输入地区" />
      </view>

      <!-- 图片上传 -->
      <view class="input-group">
        <text class="label">活动图片</text>
        <button @click="chooseImage">选择图片</button>
        <!-- 本地图片预览 -->
        <image v-if="selectedFile" class="event-image-preview" :src="selectedFile"></image>
      </view>

      <!-- 提交按钮 -->
      <view class="dialog-actions">
        <button 
          :disabled="!title || !description || !startDate || !startTime || !endDate || !endTime || !selectedFile" 
          @click="createNewEvent">
          创建活动
        </button>
      </view>
    </scroll-view>
  </view>
</template>


<script>
	export default {
	  data() {
	    return {
		  title: "", // 活动标题
		  description: "", // 活动描述
		  startDate: "", // 开始日期
		  startTime: "", // 开始时间
		  endDate: "", // 结束日期
		  endTime: "", // 结束时间
		  location: "", // 活动地点
		  province: "", // 活动省份
		  city: "", // 活动城市
		  district: "", // 活动区
		  statusIndex: null, // 活动状态
		  selectedFile: null, // 上传的图片文件
		  newEvent: { imageUrl: "" }, // 存储上传后的图片 URL
	      statusOptions: ['未发布', '进行中', '已结束'], // 活动状态选项
	    };
	  },
	  methods: {
    // 日期选择处理
		onStartDateChange(e) {
		  this.startDate = e.detail.value; // 更新开始日期
		  console.log("选择的开始日期:", this.startDate);
		},
		onStartTimeChange(e) {
		  this.startTime = e.detail.value; // 更新开始时间
		  console.log("选择的开始时间:", this.startTime);
		},
		onEndDateChange(e) {
		  this.endDate = e.detail.value; // 更新结束日期
		  console.log("选择的结束日期:", this.endDate);
		},
		onEndTimeChange(e) {
		  this.endTime = e.detail.value; // 更新结束时间
		  console.log("选择的结束时间:", this.endTime);
		},

		// 提交时动态拼接完整的时间
		getCompleteDateTime(date, time) {
		  if (date && time) {
			return `${date}T${time}:00`; // 拼接日期和时间，并补全秒
		  }
		  return null; // 如果缺少日期或时间，则返回 null
		},
	    updateStatus(e) {
	      this.statusIndex = e.detail.value; // 更新状态索引
	    },
		// 选择图片并上传
		async chooseImage() {
		  try {
			const res = await new Promise((resolve, reject) => {
			  uni.chooseImage({
				count: 1,
				success: (res) => resolve(res),
				fail: (err) => reject(err),
			  });
			});
			
			const tempFilePath = res.tempFilePaths[0];
			this.selectedFile = tempFilePath;

		  } catch (error) {
			console.error("选择图片失败:", error);
			uni.showToast({
			  title: "选择图片失败",
			  icon: "none",
			});
		  }
		},
	  // 提交活动
	  async createNewEvent() {
		const token = uni.getStorageSync("token");
  
		// 校验必填字段
		if (!this.title || !this.description || !this.startDate || !this.startTime || !this.endDate || !this.endTime) {
		  uni.showToast({
			title: "请填写完整的活动信息",
			icon: "none",
		  });
		  return;
		}
		if (!this.selectedFile) {
		  uni.showToast({
			title: "请上传图片",
			icon: "none",
		  });
		  return;
		}
  
		// 上传图片
		try {
		  const uploadResponse = await new Promise((resolve, reject) => {
			uni.uploadFile({
			  url: "http://localhost:8080/api/events/uploadEventImage",
			  filePath: this.selectedFile,
			  name: "image",
			  header: {
				Authorization: `${token}`,
			  },
			  success: (uploadRes) => resolve(uploadRes),
			  fail: (err) => reject(err),
			});
		  });
  
		  const uploadData = JSON.parse(uploadResponse.data);
		  if (uploadData.success) {
			this.newEvent.imageUrl = uploadData.imageUrl;
			console.log(this.newEvent.imageUrl);
			
		  // 拼接完整的开始和结束时间
		  const startDateTime = this.getCompleteDateTime(this.startDate, this.startTime);
		  const endDateTime = this.getCompleteDateTime(this.endDate, this.endTime);
			      console.log("拼接的开始时间:", startDateTime);
			      console.log("拼接的结束时间:", endDateTime);

			// 提交活动数据
			const postResponse = await new Promise((resolve, reject) => {
			  // 提交活动数据
			  console.log("准备提交的活动数据:", {
			    title: this.title,
			    description: this.description,
			    startTime: `${this.startDate}T${this.startTime}:00`,
			    endTime: `${this.endDate}T${this.endTime}:00`,
			    location: this.location,
			    province: this.province,
			    city: this.city,
			    district: this.district,
			    status: this.statusIndex,
			    imageUrl: this.newEvent.imageUrl,
			  });
			  uni.request({
				url: "http://localhost:8080/api/events/createEvent",
				method: "POST",
				data: {
				  title: this.title,
				  description: this.description,
				  startTime: startDateTime,
				  endTime: endDateTime,
				  location: this.location,
				  province: this.province,
				  city: this.city,
				  district: this.district,
				  status: this.statusIndex,
				  imageUrl: this.newEvent.imageUrl,
				},
				header: {
				  "Content-Type": "application/json",
				  Authorization: `${token}`,
				},
				success: (res) => resolve(res),
				fail: (err) => reject(err),
			  });
			});
  
			if (postResponse.statusCode === 201) {
			  uni.showToast({
				title: "活动创建成功",
				icon: "success",
			  });
			  uni.navigateTo({
				url: "/pages/user/user",
			  });
			} else {
			  uni.showToast({
				title: "创建活动失败",
				icon: "none",
			  });
			}
		  } else {
			uni.showToast({
			  title: "图片上传失败",
			  icon: "none",
			});
		  }
		} catch (error) {
		  console.error("提交失败:", error.message);
		  uni.showToast({
			title: "创建活动时发生错误，请稍后再试",
			icon: "none",
		  });
		}
	  },
	},
  };

</script>

<style>
	<style>
		
	.container {
	  display: flex;
	  justify-content: center;
	  flex-direction: column;
	  padding: 10px;
	  background-color: #fffaf2;
	}
	
	.section-header {
	  margin-top: 20px;
	}
	
	.title-text {
	  font-size: 18px;
	  font-weight: bold;
	  color: #333;
	  margin-bottom: 8px;
	  margin-left: 15px;
	}
	
	.divider {
	  height: 3px;
	  margin: 0 auto;
	  background-color: #934e3d;
	  width: 90%;
	}
	
	.event-list {
	  margin-top: 20px;
	}
	
	.event-item {
	  display: flex;
	  padding: 10px;
	  margin-bottom: 10px;
	  background-color: #fff;
	  border-radius: 8px;
	  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
	}
	
	.event-image {
	  width: 80px;
	  height: 80px;
	  border-radius: 8px;
	  margin-right: 10px;
	  object-fit: cover;
	}
	
	.event-info {
	  flex: 1;
	  display: flex;
	  flex-direction: column;
	  justify-content: space-between;
	}
	
	.event-title {
	  font-size: 16px;
	  font-weight: bold;
	  color: #333;
	}
	
	.event-location {
	  font-size: 14px;
	  color: #666;
	  margin: 5px 0;
	}
	
	.no-events {
	  text-align: center;
	  font-size: 16px;
	  color: #999;
	  margin-top: 20px;
	}
	
	
	
	.edit-dialog {
	  position: fixed;
	  top: 0;
	  left: 0;
	  right: 0;
	  bottom: 0;
	  background-color: rgba(0, 0, 0, 0.5);
	  display: flex;
	  justify-content: center;
	  align-items: center;
	}
	
	.dialog-content {
	  width: 90%;
	  max-height: 100%; /* 限制弹框最大高度 */
	  background-color: white;
	  border-radius: 10px;
	  padding: 20px;
	  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
	  overflow-y: scroll; /* 启用滚动 */
	}
	
	.dialog-title {
	  font-size: 18px;
	  font-weight: bold;
	  margin-bottom: 20px;
	  text-align: center;
	}
	
	.input-group {
	  margin-bottom: 15px;
	}
	
	.label {
	  font-size: 14px;
	  color: #333;
	  margin-bottom: 5px;
	}
	
	textarea,
	input,
	.picker {
	  width: 100%;
	  padding: 8px;
	  border: 1px solid #ccc;
	  border-radius: 5px;
	}
	
	.dialog-actions {
	  display: flex;
	  justify-content: space-between;
	}
	
	button {
	  flex: 1;
	  margin: 0 5px;
	  padding: 10px;
	  background-color: #007bff;
	  color: white;
	  border: none;
	  border-radius: 5px;
	  font-size: 16px;
	  cursor: pointer;
	}
	
	button:nth-child(2) {
	  background-color: #ccc;
	}
	
	.description-textarea {
	  width: 100%;
	  height: 40px; /* 限制高度为 80px */
	  padding: 8px;
	  border: 1px solid #ccc;
	  border-radius: 5px;
	  resize: none; /* 禁止用户调整大小 */
	  overflow-y: auto; /* 超出范围时显示滚动条 */
	  font-size: 14px;
	  line-height: 1.5;
	}
	.picker {
	  width: 100%;
	  padding: 8px;
	  border: 1px solid #ccc;
	  border-radius: 5px;
	  background-color: #f9f9f9;
	  text-align: left;
	  font-size: 14px;
	  color: #333;
	  margin-bottom: 10px;
	}

	
</style>