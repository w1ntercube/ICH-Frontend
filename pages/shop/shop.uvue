<template>
  <view class="shop-container">
    <view class="content">
      <!-- 分类列表 -->
      <scroll-view class="type-list" scroll-y :direction="'horizontal'" 
	  :scroll-with-animation="true"
	  :show-scrollbar="false">
        <view 
          v-for="(item, index) in types" 
          :key="item.typeId" 
          :class="['type-item', currentType === item.typeId ? 'active' : '']"
          @click="switchType(item)"
        >
          <text>{{ item.typeName }}</text>
        </view>
      </scroll-view>
    </view>
	 <!-- 搜索框部分 -->
	 <view class="content">
		 <view class="search-container">
		   <view class="search-box">
		     <image 
		       src="/static/images/search-icon.png" 
		       class="search-icon" 
		       mode="aspectFit"
		     />
		     <input 
		       type="text" 
		       v-model="searchKeyword" 
		       class="search-input" 
		       placeholder="请输入商品关键词"
		       @confirm="handleSearch"
		     />
		   </view>
		   <button class="search-btn" @click="handleSearch">搜索</button>
		 </view>
	</view>
	    
	<!-- 商品列表 -->
	<scroll-view 
	  class="product-list" 
	  scroll-y 
	  @scrolltolower="loadMoreProducts"
	>
	  <view 
	    v-for="product in products" 
	    :key="product.productId" 
	    class="product-card"
	  >
	    <image 
	      :src="product.imageURL || '/static/images/商品图1.png'" 
	      class="product-image" 
	      mode="aspectFill"
	    />
	    <view class="product-info">
	      <text class="product-title">{{ product.title }}</text>
	      <view class="price-container">
	          <image 
	            src="/static/images/price.png" 
	            class="price-icon" 
	            mode="aspectFit"
	          />
	          <text class="product-price">{{ product.price.toFixed(2) }}</text>
	        </view>
	      <button 
	        class="detail-btn" 
	        @click="goToDetail(product.productId)"
	      >查看详情</button>
	    </view>
	  </view>
	 <view class="load-more" @click="loadMoreProducts" v-if="hasMore">
	     <text v-if="!loading">点击加载更多</text>
	     <text v-else>加载中...</text>
	   </view>
	</scroll-view>
  </view>
</template>

<script>
import { toRaw } from 'vue';
export default {
  data() {
    return {
      currentType: 1, // 默认选中第一个分类
      currentTypeName: '', // 当前选中的分类名称
      types: [], // 商品分类
      products: [], // 商品列表
      lastId: 0, // 最后一个商品的ID
      loading: false, // 是否正在加载
      limit: 5 ,// 每次加载的商品数量
	  searchKeyword: '',
	  hasMore: true, // 是否还有更多数据
    }
  },
  
  onLoad() {
    this.getTypes()
  },
  
  methods: {
	  
	// 添加专门的搜索方法
    async handleSearch() {
      if (this.loading) return;
      this.loading = true;
      
      try {
		// 构建带查询参数的 URL
        const url = `http://localhost:8080/api/products/search?keyword=${encodeURIComponent(this.searchKeyword)}`;
        
        const response = await fetch(url, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        let result = await response.json();
        result = toRaw(result);
        
        if (result.data && result.data.productList) {
          this.products = result.data.productList;
          this.products = toRaw(this.products);
        }
        
        // 如果搜索结果为空，显示提示
        if (!this.products.length) {
          uni.showToast({
            title: '未找到相关商品',
            icon: 'none'
          });
        }
        
      } catch (error) {
        console.error("搜索商品失败:", error);
        uni.showToast({
          title: '搜索失败',
          icon: 'none'
        });
      } finally {
        this.loading = false;
      }
    },

    // 获取商品分类
    async getTypes() {
      try {
        const response = await fetch("http://localhost:8080/api/products/types")
        const result = await response.json()
        this.types = result.data
        console.log("获取分类成功:", result)
        // 默认选中第一个分类并加载商品
        if (this.types.length > 0) {
          this.currentTypeName = this.types[0].typeName
		  console.log(this.currentType)
          this.getProducts()
        }
      } catch (error) {
        console.error("获取分类失败:", error)
        uni.showToast({
          title: '获取分类失败',
          icon: 'none'
        })
      }
    },
    
    // 切换分类
    async switchType(type) {
      this.currentType = type.typeId
      this.currentTypeName = type.typeName
      this.lastId = 0 // 重置lastId
      this.products = [] // 清空商品列表
      await this.getProducts()
    },
    
    // 获取商品列表
    async getProducts() {
      if (this.loading) return
      this.loading = true
      try {
        const params = {
          typeName: this.currentTypeName,
          lastId: this.lastId,
          limit: this.limit
        }
        
        const response = await fetch("http://localhost:8080/api/products/list", {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(params)
        })
        
        let result = await response.json()
        
		result=toRaw(result)
		console.log("获取商品成功:", result)
        if (result.data && result.data.productList) {
          if (this.lastId === 0) {
            // 首次加载或切换分类
            this.products = result.data.productList
          } else {
            // 加载更多
            this.products = [...this.products, ...result.data.productList]
          }
          
          // 更新lastId
          if (result.data.productList.length > 0) {
            this.lastId = result.data.productList[result.data.productList.length - 1].productId
          }
		  
		  // 判断是否还有更多数据
		        this.hasMore = result.data.productList.length >= this.limit
        }
		this.products=toRaw(this.products)
		console.log(this.products)
      } catch (error) {
        console.error("获取商品列表失败:", error)
        uni.showToast({
          title: '获取商品列表失败',
          icon: 'none'
        })
      } finally {
        this.loading = false
      }
    },
    
    // 加载更多商品
    loadMoreProducts() {
      this.getProducts()
	  console.log("已加载更多商品")
    },
    
    // 跳转到商品详情页
    goToDetail(productId) {
		console.log("ID:",productId)
		uni.navigateTo({ 
			url: `/pages/shop/ProductDetail/ProductDetail?productId=${productId}`
       })
    },
	goToPage(page) {
	  uni.navigateTo({
	    url: `/pages/${page}/${page}`
	  });
	}
  }
}
</script>

<style>
.shop-container {
  display: flex;
  flex-direction: column;
  background-color: #fffaf2;
  overflow: hidden; /* 禁用外层容器的滚动 */
  
}

.content {
	display: flex; /* 使用flex布局进行横向排列 */
    padding: 10rpx;
    flex-wrap: nowrap; /* 防止子元素换行 */
}

.type-list {
  display: flex;
  flex-direction: row; /* 横向排列 */
  height: 40px; /* 设置分类列表的高度 */
  background-color: #fff;
  border-bottom: 1rpx solid #eee;
  border-radius:10px;
}

.type-item {
	display: inline-block;
    padding: 17rpx 20rpx;
    margin: 0 0rpx;
    font-size: 28rpx;
    color: #ffffff;
	background-color: #e49e87;
    border-radius: 0rpx;
    transition: all 0.3s;
    white-space: nowrap;
}

.type-item.active {
  background-color: #fffaf2;
  color: #ae735d;
}

/* 搜索框相关样式 */
.search-container {
  display: flex;
  flex-direction: row;
  padding: 10rpx;
  background-color: #fff;
  border-radius:10px;
  align-items: center;
  gap: 20rpx;
}

.search-box {
  flex: 1;
  flex-direction: row;
  height: 70rpx;
  background-color: #ffffff;
  border-radius: 35rpx;
  display: flex;
  align-items: center;
  padding: 0 20rpx;
}

.search-icon {
  width: 40rpx;
  height: 40rpx;
  margin-right: 10rpx;
}
.search-input {
  flex: 1;
  height: 100%;
  font-size: 28rpx;
  color: #333;
}

.search-btn {
  width: 120rpx;
  height: 70rpx;
  line-height: 70rpx;
  background-color: #e49e87;
  color: #fff;
  font-size: 28rpx;
  border-radius: 25rpx;
  padding: 0;
  margin: 0;
}

.product-list {
  padding: 15px;
}

.product-card {
  display: flex; /* 使用flex布局 */
  flex-direction: row; /* 横向排列 */
  background-color: #fff;
  margin-bottom: 15px;
  border-radius: 20px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
  padding: 10px;
}

.product-image {
  flex: 0.6;
  height: 160px; /* 固定图片高度 */
  width: auto; /* 固定图片宽度 */
  border-radius: 20px;  
}

.product-info {
  flex: 0.4; /* 占据剩余空间 */
  padding: 10px;
  display: flex;
  flex-direction: column; /* 纵向排列信息 */
  justify-content: space-between; /* 垂直均匀分布 */
}

.product-title {
	color:#ff8f73;
  font-size: 16px;
  font-weight:550;
  margin-bottom: 8px;
  /* 文本超出显示省略号 */
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
}

.price-container {
  display: flex;
  flex-direction: row;
  align-items: center; /* 垂直居中对齐 */
  gap: 8rpx; /* 图标和价格之间的间距 */
  margin: 10rpx 0;
}

.price-icon {
  width: 50rpx; /* 调整图标大小 */
  height: 50rpx;
}

.product-price {
  font-size: 32rpx;
  color: #ff4400;
  font-weight: bold;
  }

.detail-btn {
  background-color: #ff8f73;
  color: white;
  font-size: 14px;
  padding: 2px 5px;
  border-radius: 10px;
  border: none;
  height:40px;
  width: auto; /* 按钮宽度自适应 */
  margin-top: auto; /* 按钮靠下对齐 */
}

.load-more {
  text-align: center;
  padding: 30px;
  color: #adaebf;
  font-size: 15rpx;
  margin-left: 80px;
  cursor: pointer;
}

.load-more:active {
  opacity: 0.8;
}


</style>