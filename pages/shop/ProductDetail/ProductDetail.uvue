<template>
	<view class="container">
		<view class="product-detail">
		  <!-- 商品图片区域 -->
		  <view class="product-image-container">
		    <image :src="product.imageURL || '/static/images/商品图1.png'" class="product-image" mode="aspectFill" />
		    
		  </view>
		
		  <!-- 商品信息 -->
		  <view class="product-info">
		    <text class="product-title">商品名称：{{ product.title }}</text>
			<view class="price-container">
			    <image 
			      src="/static/images/price.png" 
			      class="price-icon" 
			      mode="aspectFit"
			    />
			    <text class="product-price">{{ product.price.toFixed(2) }}</text>
			  </view>
		    <text class="product-source">商品来源：<text class="source-name">{{ product.sellerId }}</text></text>
		    <text class="product-description">{{ product.description }}</text>
		  </view>
		
		  <!-- 购买按钮 -->
		  <view class="product-footer">
		    <button class="buy-btn" @click="goToBuy">点击购买</button>
		  </view>
		</view>
	</view>
  
</template>

<script>
export default {
  data() {
    return {
	  productId:null,
      product: {} // 用于存储商品数据
    };
  },
  onLoad(options) {
	  console.log("接productId：", options.productId);
    if (options.productId) {
		console.log("接收到的 productId：", options.productId); // 打印接收到的字符串
		this.getProductDetail(options.productId);
	
    }
  },
  methods: {
	async getProductDetail(productId) {
		console.log("prd",productId)
		this.productId=productId
		try {
		  const url = `http://localhost:8080/api/products/${this.productId}/byId` 
		  const response = await fetch(url)
		  const result = await response.json()
		  this.types = result.data
		  console.log("获取成功:", result.data)
		  // 默认选中第一个分类并加载商品
		  this.product=result.data
		} catch (error) {
		  console.error("获取失败:", error)
		  uni.showToast({
		    title: '获取失败',
		    icon: 'none'
		  })
		}
	},
    goToBuy() {
		// if (this.product.salesURL) {
		// 	console.log("链接", this.product.salesURL);
		// 	// 在 H5 环境下，直接跳转到外部链接
		// 	window.location.href = this.product.salesURL;
		//   } else {
		// 	uni.showToast({
		// 	  title: "暂无购买链接",
		// 	  icon: "none"
		// 	});
		//   }
		if (this.product.salesURL) {
		    uni.navigateTo({
		      url: `/pages/shop/SalePage/SalePage?url=${encodeURIComponent(this.product.salesURL)}`
		    });
		  } else {
		    uni.showToast({
		      title: "暂无购买链接",
		      icon: "none"
		    });
		  }
    }
  }
};
</script>

<style scoped>
.container{
  display: flex;
  flex-direction: column;
  height: 600px;
  background-color: #fffaf2;
}
.product-detail {
	display: flex;
	top: 30rpx;
	margin:30rpx;
  padding: 20rpx;
  padding-top: 40rpx; 
  padding-bottom: 40rpx;
  background-color: #faecdd;
  border-radius: 10px;
}

.product-image-container {
  
  position: relative;
  left:50rpx;
}

.product-image {
  width: 80%;
  height: 450rpx;
  border-radius: 30px;
  box-shadow: 0 5rpx 10rpx rgba(0, 0, 0, 0.1);
}

.price-container {
  display: flex;
  flex-direction: row;
  align-items: center; /* 垂直居中对齐 */
  gap: 8rpx; /* 图标和价格之间的间距 */
  margin: 10rpx 0;
}

.price-icon {
  width: 50rpx; /* 调整图标大小 */
  height: 50rpx;
}

.product-price {
  font-size: 32rpx;
  color: #ff4400;
  font-weight: bold;
  }
.product-info {
  margin-top: 20rpx;
  padding: 20rpx;
  border-radius: 20rpx;
}

.product-title {
  font-size: 40rpx;
  font-weight: bold;
  color: #5d513e;
  margin-bottom: 10rpx;
}

.product-source {
  font-size: 24rpx;
  font-weight: bold;
  color: #a08383;
  margin-bottom: 20rpx;
}

.source-name {
  color: #ff6600;
}

.product-description {
	margin-top: 30rpx;
  font-size: 26rpx;
  color: #604340;
  line-height: 36rpx;
}

.product-footer {
  margin-top: 30rpx;
  text-align: center;
}

.buy-btn {
  background-color: #ff8f73;
  color: white;
  font-size: 14px;
  padding: 2px 5px;
  border-radius: 10px;
  border: none;
  height:40px;
  width: 120px; /* 按钮宽度自适应 */
  margin-top: auto; /* 按钮靠下对齐 */
  margin-left: 80px;
}
</style>
