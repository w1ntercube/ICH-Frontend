<template>
	<view class="post-details">

		<!-- 帖子信息 -->
		<view class="post-content">
			<text class="post-title">{{postTitle}}</text>
			<text class="user-name">作者：{{ authorName }} &nbsp; 时间：{{ createdTime }}</text>
			<image :src="postImage" class="post-image" mode="aspectFit" />
			<text class="post-text">{{ postContent }}</text>
		</view>

		<!-- 操作栏 -->

		<view class="action-item" @click="toggleLike">
			<image :src="likeIcon" class="icon" />
			<text>{{ likeCount }}</text>
		</view>
		<view class="action-item" @click="openComments">
			<image src="/static/images/comment.png" class="icon" />
			<text>{{ commentCount }}</text>
		</view>
		<view class="action-item" @click="toggleFavorite">
			<image :src="favoriteIcon" class="icon" />		
		</view>


	</view>
</template>


<script>
export default {
	data() {
		return {
			postId: null, 
			postTitle: "",
			authorName: "",
			postImage: "",
			postContent: "",
			likeCount: 0,
			commentCount: 0,
			isLiked: false,
			isFavorited: false,
			createdTime: "",
		};
	},
	onLoad(query) {
		this.postId = query.postId;
	},
	computed: {
		likeIcon() {
			return this.isLiked ? "/static/images/liked.png" : "/static/images/like.png";
		},
		favoriteIcon() {
			return this.isFavorited ? "/static/images/collected.png" : "/static/images/collect.png";
		},
	},
	methods: {
		toggleLike() {
		  // 判断是否已经点赞
		  this.isLiked = !this.isLiked;
		
		  // 更新点赞数量
		  this.likeCount += this.isLiked ? 1 : -1;
		
		  // 发送请求
		  const url = this.isLiked
		    ? `http://localhost:8080/api/post/${this.postId}/like`  // 点赞
		    : `http://localhost:8080/api/post/${this.postId}/unlike`;  // 取消点赞
		
		  // 发送请求
		  fetch(url, {
		    method: 'POST',
		    headers: {
		      'Content-Type': 'application/json',
		      // 添加必要的认证头部
		      'Authorization': `Bearer ${token}`
		    },
		  })
		    .then(response => response.json())
		    .then(data => {
		      // 成功处理后的逻辑
		      console.log('点赞状态更新成功:', data);
		    })
		    .catch(error => {
		      // 请求失败的逻辑
		      console.error('请求失败:', error);
		      // 如果请求失败，恢复点赞状态
		      this.isLiked = !this.isLiked;
		      this.likeCount += this.isLiked ? 1 : -1;
		    });
		},
		openComments() {
			// 跳转到评论页面
			uni.navigateTo({
				url: `/pages/posts/comment/comment?postId=${this.postId}`,
			});
		},
		toggleFavorite() {
		  // 判断是否已经收藏
		  this.isFavorited = !this.isFavorited;

		  // 发送请求
		  const url = this.isFavorited
			? `http://localhost:8080/api/post/${this.postId}/favorite`  // 收藏
			: `http://localhost:8080/api/post/${this.postId}/cancel-favorite`;  // 取消收藏

		  // 发送请求
		  fetch(url, {
			method: 'POST',
			headers: {
			  'Content-Type': 'application/json',
			  // 添加必要的认证头部
			  'Authorization': `Bearer ${token}`
			},
		  })
			.then(response => response.json())
			.then(data => {
			  // 成功处理后的逻辑
			  console.log('收藏状态更新成功:', data);
			})
			.catch(error => {
			  // 请求失败的逻辑
			  console.error('请求失败:', error);
			  // 如果请求失败，恢复收藏状态
			  this.isFavorited = !this.isFavorited;
			});
		},
		async fetchPostDetail() {
			try {
				const response = await fetch(`http://localhost:8080/api/post/${this.postId}`);
				const data = await response.json();
				if (data && data.user) {
					this.authorName = data.user.username;
				} else {
					console.error("未能找到用户信息");
				}

				this.postTitle = data.title;
				this.postImage = data.imageUrl;
				this.postContent = data.content;
				this.likeCount = data.likesCount;
				this.commentCount = data.commentsCount;
				this.createdTime = data.createdAt;
			} catch (error) {
				console.error("获取帖子详情失败:", error);
			}
		}
	},
	mounted() {
		this.fetchPostDetail();
	},
};
</script>

<style>
.post-details {
  display: flex;
  flex-direction: column;
  padding: 15px;
  background-color: #f5f5f5;
}

.post-content {
  margin-bottom: 20px;
}

.post-title {
	font-size: 20px;
	margin: 0 auto;
	margin-bottom: 10px;
}

.user-name {
  font-size: 13px;
  color: #555;
  margin-bottom: -10px;
}

.post-image {
  width: 100%;
  max-width: 600px; /* 限制图片最大宽度 */
  margin: 0 auto; /* 图片居中 */
  margin-top: -45px;
  display: block;
}

.post-text {
  font-size: 14px;
  color: #333;
  margin-top: -40px;
}

.icon {
  width: 24px;
  height: 24px;
  margin-bottom: 5px; /* 图标和文本之间的间距 */
}

.action-item text {
  font-size: 15px;
  color: #555;
}
</style>
