<template>
  <view class="post-details">

    <!-- 帖子信息 -->
    <view class="post-content">
      <text class="post-title">{{postTitle}}</text>
      <text class="user-name">作者：{{ authorName }} &nbsp; 时间：{{ createdTime }}</text>
      <image :src="postImage" class="post-image" mode="aspectFit" />
      <text class="post-text">{{ postContent }}</text>
    </view>

    <!-- 操作栏，固定在底部 -->
    <div class="action-bar">
      <span class="action-item" @click="toggleLike">
        <image :src="likeIcon" class="icon" /> {{ likeCount }}
      </span>
      <span class="action-item" @click="openComments">
        <image src="/static/images/comment.png" class="icon" /> {{ commentCount }}
      </span>
      <span class="action-item" @click="toggleFavorite">
        <image :src="favoriteIcon" class="icon" />
      </span>
    </div>

  </view>
</template>

<script>
export default {
  data() {
    return {
      postId: null, 
      postTitle: "",
      authorName: "",
      postImage: "",
      postContent: "",
      likeCount: 0,
      commentCount: 0,
      isLiked: false,
      isFavorited: false,
      createdTime: "",
    };
  },
  onLoad(query) {
    this.postId = query.postId;
  },
  computed: {
    likeIcon() {
      return this.isLiked ? "/static/images/liked.png" : "/static/images/like.png";
    },
    favoriteIcon() {
      return this.isFavorited ? "/static/images/collected.png" : "/static/images/collect.png";
    },
  },
  methods: {
    toggleLike() {
      // 判断是否已经点赞
      this.isLiked = !this.isLiked;
      // 更新点赞数量
      this.likeCount += this.isLiked ? 1 : -1;
      const url = this.isLiked
        ? `http://localhost:8080/api/post/${this.postId}/like`
        : `http://localhost:8080/api/post/${this.postId}/unlike`;
      const token = uni.getStorageSync('token');
      fetch(url, {
        method: 'POST',
        headers: {
          'Authorization': `${token}`
        },
      })
        .then(response => response.json())
        .then(data => {
          console.log('点赞状态更新成功:', data);
        })
        .catch(error => {});
    },
    openComments() {
      uni.navigateTo({
        url: `/pages/posts/comment/comment?postId=${this.postId}`,
      });
    },
    toggleFavorite() {
      this.isFavorited = !this.isFavorited;
      const url = this.isFavorited
        ? `http://localhost:8080/api/post/${this.postId}/favorite`
        : `http://localhost:8080/api/post/${this.postId}/cancel-favorite`;
      const token = uni.getStorageSync('token');
      fetch(url, {
        method: 'POST',
        headers: {
          'Authorization': `${token}`
        },
      })
        .then(response => response.json())
        .then(data => {
          console.log('收藏状态更新成功:', data);
        })
        .catch(error => {});
    },
    async fetchPostDetail() {
      try {
        const response = await fetch(`http://localhost:8080/api/post/${this.postId}`);
        const data = await response.json();
        if (data && data.user) {
          this.authorName = data.user.username;
        } else {
          console.error("未能找到用户信息");
        }
        this.postTitle = data.title;
        this.postImage = data.imageUrl;
        this.postContent = data.content;
        this.likeCount = data.likesCount;
        this.commentCount = data.commentsCount;
        this.createdTime = data.createdAt;
      } catch (error) {
        console.error("获取帖子详情失败:", error);
      }
    }
  },
  mounted() {
    this.fetchPostDetail();
  },
};
</script>

<style>
.post-details {
  display: flex;
  flex-direction: column;
  padding: 15px;
  background-color: #f5f5f5;
  padding-bottom: 60px; /* 给操作栏留出空间 */
}

.post-content {
  margin-bottom: 20px;
}

.post-title {
  font-size: 20px;
  margin: 0 auto;
  margin-bottom: 10px;
}

.user-name {
  font-size: 13px;
  color: #555;
  margin-bottom: -10px;
}

.post-image {
  width: 100%;
  max-width: 600px;
  margin: 0 auto;
  margin-top: 15px;
  display: block;
}

.post-text {
  font-size: 14px;
  color: #333;
  margin-top: 15px;
}

.icon {
  width: 30px;
  height: 30px;
  margin-bottom: 5px;
}

.action-bar {
  position: fixed;
  bottom: 0;
  left: 0;
  width: 100%;
  background-color: #ffffff;
  display: flex;
  justify-content: space-around;
  padding: 10px 0;
  border-top: 1px solid #ddd;
}

.action-item {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.action-item text {
  font-size: 13px;
  color: #555;
}
</style>
