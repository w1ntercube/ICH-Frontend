<template>
  <view class="register-container">
    <view class="form">
      <view class="input-group">
        <text class="label">手机号</text>
        <input 
          v-model="phone" 
          type="text" 
          placeholder="请输入手机号"
          class="input-field"
        />
		 <button @click="getCode" class="code-button">获取验证码</button>
      </view>
	  
	  <view class="input-group">
	    <text class="label">验证码</text>
	    <input 
	      v-model="code" 
	      type="text" 
	      placeholder="请输入验证码"
	      class="input-field"
	    />
	  </view>

      <view class="input-group">
        <text class="label">邮箱</text>
        <input 
          v-model="email" 
          type="text" 
          placeholder="请输入邮箱"
          class="input-field"
        />
      </view>

      <view class="input-group">
        <text class="label">用户名</text>
        <input 
          v-model="username" 
          type="text" 
          placeholder="请输入用户名"
          class="input-field"
        />
      </view>

      <view class="input-group">
        <text class="label">密码</text>
        <input 
          v-model="password" 
          type="password" 
          placeholder="请输入密码"
          class="input-field"
        />
      </view>

      <button @click="register" class="register-button">注册</button>

      <view v-if="errorMessage" class="error-message">
        {{ errorMessage }}
      </view>
    </view>
  </view>
</template>

<script>
export default {
  data() {
    return {
      phone: '',
      email: '',
      username: '',
      password: '',
      code: '',
      errorMessage: '',
      isLoading: false,
    };
  },
  methods: {
    // 获取验证码
    getCode() {
      if (!this.phone) {
        this.errorMessage = '请输入手机号';
        return;
      }
    
      // 先检查手机号是否已注册
      uni.request({
        url: 'http://localhost:8080/api/auth/verifyPhone',
        method: 'POST',
        data: {
          phone: this.phone,
        },
        success: (response) => {
          if (response.statusCode === 200) {
            console.log("手机号可以注册");
            this.sendVerificationCode();
          } else {
            this.errorMessage = '手机号已经存在';
          }
        },
        fail: (error) => {
          this.errorMessage = '网络错误，请重试';
          console.error("检查手机号失败", error);
        }
      });
    },
   
    // 发送验证码的函数
    sendVerificationCode() {
      uni.request({
        url: 'http://localhost:8080/api/sms/sendCode',
        method: 'POST',
        data: {
          phone: this.phone,
        },
        success: (response) => {
          if (response.statusCode === 200) {
            console.log("验证码发送成功");
            this.errorMessage = '验证码已发送，请查收';
          } else {
            this.errorMessage = '验证码发送失败，请稍后再试';
          }
        },
        fail: (error) => {
          this.errorMessage = '网络错误，请重试';
          console.error("验证码请求失败", error);
        }
      });
    },

    // 验证验证码是否正确
    verifyCode() {
      if (!this.phone || !this.code) {
        this.errorMessage = '请输入手机号和验证码';
        return false;
      }
    
      return new Promise((resolve, reject) => {
        uni.request({
          url: 'http://localhost:8080/api/sms/verifyCode',
          method: 'POST',
          data: {
            phone: this.phone,  
            code: this.code
          },
          success: (response) => {
            if (response.statusCode === 200) {
              const responseData = response.data;
              resolve(true); // 验证成功
            } else {
              this.errorMessage = '验证码验证失败，请检查验证码';
              reject(false); // 验证失败
            }
          },
          fail: (error) => {
            this.errorMessage = '验证码验证失败，请检查验证码';
            console.error("验证码验证请求失败", error);
            reject(false); // 请求失败
          }
        });
      });
    },

    // 注册
    async register() {
      if (!this.phone || !this.email || !this.username || !this.password) {
        this.errorMessage = '请完整填写所有字段';
        return;
      }

      this.isLoading = true;

      // 首先验证验证码
      const isVerified = await this.verifyCode();
      if (!isVerified) {
        this.isLoading = false;
        return;
      }

      uni.request({
        url: 'http://localhost:8080/api/auth/register',
        method: 'POST',
        data: {
          phone: this.phone,
          email: this.email,
          username: this.username,
          password: this.password
        },
        success: (response) => {
          this.isLoading = false;

          if (response.statusCode === 201) {
            this.errorMessage = '注册成功，请返回登录';
            
            setTimeout(() => {
              uni.navigateTo({
                url: '/pages/login/login',
              });
            }, 800);

          } else {
            this.errorMessage = '注册失败，可能由于电话号或邮箱重复';
          }
        },
        fail: (error) => {
          this.isLoading = false;
          this.errorMessage = '网络错误，请重试';
          console.error("注册请求失败", error);
        }
      });
    }
  },
};


</script>

<style>
.register-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background-color: rgb(238, 225, 215);
}

.form {
  width: 80%;
  max-width: 400px;
  background-color: white;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.input-group {
  margin-bottom: 10px;
}

.label {
  font-size: 14px;
  color: #333;
  margin-bottom: 4px;
}

.input-field {
  width: 100%;
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.register-button {
  width: 100%;
  padding: 10px;
  background-color: rgb(238, 225, 215);
  color: black;
  margin-top: 10px;
  border: none;
  border-radius: 4px;
  font-size: 14px;
  cursor: pointer;
  height: 30px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.register-button:disabled {
  background-color: #ddd;
}

.code-button {
 width: 100%;
 padding: 10px;
 background-color: rgb(238, 225, 215);
 color: black;
 margin-top: 10px;
 border: none;
 border-radius: 4px;
 font-size: 14px;
 cursor: pointer;
 height: 30px;
 display: flex;
 justify-content: center;
 align-items: center;
}

.error-message {
  color: red;
  font-size: 14px;
  margin-top: 10px;
}
</style>
