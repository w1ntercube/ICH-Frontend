<template>
  <view class="login-container">
	<image class="logo" src="/static/images/遗光.png"></image>
    <view class="form">
      <view class="input-group">
        <text class="label">手机号码</text>
        <input 
          v-model="userString" 
          type="text" 
          placeholder="请输入手机号码"
          class="input-field"
        />
      </view>

      <view class="input-group">
        <text class="label">密码</text>
        <input 
          v-model="password" 
          type="password" 
          placeholder="请输入密码"
          class="input-field"
        />
      </view>

      <button @click="login" class="login-button">登录</button>

      <!-- 登录错误提示 -->
      <view v-if="errorMessage" class="error-message">
        {{ errorMessage }}
      </view>

      <view class="other-actions">
        <button @click="goToRegister" class="action-button">注册</button>
        <button @click="goToVerifyLogin" class="action-button">验证码登录</button>
      </view>
    </view>
  </view>
</template>

<script>
export default {
  data() {
    return {
      userString: '',
      password: '',
      errorMessage: '',
      isLoading: false,
    };
  },
  methods: {
    login() {
		const token = uni.getStorageSync('token');
		console.error(token);
		
      if (this.userString === '' || this.password === '') {
        this.errorMessage = '手机号和密码不能为空';
        return;
      }

      this.isLoading = true;

      uni.request({
        url: 'http://localhost:8080/api/auth/loginByPassword',
        method: 'POST',
        data: {
          userString: this.userString,
          password: this.password,
        },
        header: {
          'Content-Type': 'application/json',
        },
        success: (response) => {
          this.isLoading = false;
          
          if (response.statusCode === 200) {
            const responseData = response.data;
            if (responseData) {
              const token = responseData.data.token;
              const tokenWithBearer = 'Bearer ' + token;
				uni.setStorageSync('token', tokenWithBearer);
              console.log('Token stored:', tokenWithBearer);
              uni.switchTab({
                url: '/pages/home/home',
                success: () => {
                  console.log("Navigation to TabBar page successful");
                },
                fail: (err) => {
                  console.error("Navigation failed", err);
                }
              });
            } else {
              this.errorMessage = "用户名或密码错误";
              console.error("登录失败:", responseData.message || "用户名或密码错误");
            }
          } else {
            this.errorMessage = "用户名或密码错误";
            console.error("请求失败", response);
          }
        },
        fail: (error) => {
          this.isLoading = false;
          this.errorMessage = "网络错误，请重试";
          console.error("Request failed", error);
        }
      });
    },
    clearError() {
      this.errorMessage = '';
    },
    goToRegister() {
      uni.navigateTo({
        url: '/pages/login/register/register'
      });
    },
    goToVerifyLogin() {
      uni.navigateTo({
        url: '/pages/login/verifyLogin/verifyLogin'
      });
    }
  },
};
</script>

<style>
.login-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 90vh;
  background-color: rgb(238, 225, 215); 
}
.logo{
	width:90px;
	height:80px;
}
.form {
  width: 80%;
  max-width: 400px;
  background-color: white;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.input-group {
  margin-bottom: 20px;
}

.label {
  font-size: 14px;
  color: #333;
  margin-bottom: 8px;
}

.input-field {
  width: 100%;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.input-field.error {
  border-color: red;
}

.login-button {
  width: 100%;
  padding: 12px;
  background-color: rgb(238, 225, 215);
  color: black;
  border: none;
  border-radius: 4px;
  font-size: 16px;
  cursor: pointer;
  height: 40px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.login-button:disabled {
  background-color: #ddd;
}

.other-actions {
  display: flex;
  justify-content: space-between;
  margin-top: 20px;
}

.action-button {
  width: 100%;
  padding: 10px;
  background-color: #fcc8c9;
  color: black;
  margin-top: 10px;
  border: none;
  border-radius: 4px;
  font-size: 14px;
  cursor: pointer;
  height: 30px;
  
  display: flex;
  justify-content: center;
  align-items: center;
}


.action-button:disabled {
  background-color: #ddd;
}

.loading-spinner {
  display: inline-block;
  width: 20px;
  height: 20px;
  border: 2px solid #fff;
  border-top: 2px solid #007aff;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.error-message {
  color: red;
  font-size: 14px;
  margin-top: 10px;
}
</style>
